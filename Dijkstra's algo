#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

// Structure to represent a node in the graph
struct Node {
    int dest;
    int weight;
};

// Class to represent a graph
class Graph {
private:
    int V; // Number of vertices
    vector<vector<Node>> adjList; // Adjacency list representation

public:
    Graph(int V) : V(V) {
        adjList.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        adjList[src].push_back({dest, weight});
    }

    // Function to find the shortest path from a single source to all destinations using Dijkstra's algorithm
    vector<int> dijkstraShortestPath(int source) {
        // Vector to store distances from source to all vertices
        vector<int> dist(V, INT_MAX);

        // Priority queue to store vertices and their distances
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Set distance of source to itself as 0
        dist[source] = 0;

        // Push source into the priority queue
        pq.push({0, source});

        // Dijkstra's algorithm
        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            // Traverse all adjacent vertices of u
            for (const auto& neighbor : adjList[u]) {
                int v = neighbor.dest;
                int weight = neighbor.weight;
                // If there is a shorter path to v through u
                if (dist[u] != INT_MAX && dist[v] > dist[u] + weight) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                }
            }
        }

        return dist;
    }
};

int main() {
    // Create a graph with 5 vertices
    Graph graph(5);

    // Add edges with weights
    graph.addEdge(0, 1, 10); // Landmark 0 - Landmark 1
    graph.addEdge(0, 2, 15); // Landmark 0 - Landmark 2
    graph.addEdge(1, 2, 10); // Landmark 1 - Landmark 2
    graph.addEdge(1, 3, 20); // Landmark 1 - Landmark 3
    graph.addEdge(2, 3, 5);  // Landmark 2 - Landmark 3
    graph.addEdge(3, 4, 20); // Landmark 3 - Landmark 4

    // Find the shortest path from Landmark 0 to all other landmarks using Dijkstra's algorithm
    vector<int> shortestPaths = graph.dijkstraShortestPath(0);

    // Display the shortest paths
    cout << "Shortest paths from Landmark 0 to all other landmarks:" << endl;
    for (int i = 0; i < shortestPaths.size(); ++i) {
        cout << "Landmark " << i << ": " << shortestPaths[i] << " units" << endl;
    }

    return 0;
}
