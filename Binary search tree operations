#include <iostream>
using namespace std;

// Node structure for the binary search tree
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Class for binary search tree
class BinarySearchTree {
private:
    Node* root;

    // Function to insert a node into the binary search tree
    Node* insertNode(Node* root, int value) {
        if (root == nullptr) {
            return new Node(value);
        }
        if (value < root->data) {
            root->left = insertNode(root->left, value);
        } else if (value > root->data) {
            root->right = insertNode(root->right, value);
        }
        // Duplicate values are not inserted
        return root;
    }

    // Function to find the minimum value node in a subtree
    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr) {
            current = current->left;
        }
        return current;
    }

    // Function to delete a node from the binary search tree
    Node* deleteNode(Node* root, int value) {
        if (root == nullptr) {
            return root;
        }
        if (value < root->data) {
            root->left = deleteNode(root->left, value);
        } else if (value > root->data) {
            root->right = deleteNode(root->right, value);
        } else {
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }
            Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
        return root;
    }

    // Function to search for a value in the binary search tree
    bool searchNode(Node* root, int value) {
        if (root == nullptr) {
            return false;
        }
        if (root->data == value) {
            return true;
        }
        if (value < root->data) {
            return searchNode(root->left, value);
        } else {
            return searchNode(root->right, value);
        }
    }

    // Function to display the binary search tree using inorder traversal
    void inorderTraversal(Node* root) {
        if (root != nullptr) {
            inorderTraversal(root->left);
            cout << root->data << " ";
            inorderTraversal(root->right);
        }
    }

public:
    BinarySearchTree() : root(nullptr) {}

    // Function to insert a value into the binary search tree
    void insert(int value) {
        root = insertNode(root, value);
    }

    // Function to delete a value from the binary search tree
    void remove(int value) {
        root = deleteNode(root, value);
    }

    // Function to search for a value in the binary search tree
    bool search(int value) {
        return searchNode(root, value);
    }

    // Function to display the binary search tree
    void display() {
        cout << "Binary Search Tree (inorder traversal): ";
        inorderTraversal(root);
        cout << endl;
    }
};

int main() {
    BinarySearchTree bst;

    // Insert values into the binary search tree
    bst.insert(50);
    bst.insert(30);
    bst.insert(70);
    bst.insert(20);
    bst.insert(40);
    bst.insert(60);
    bst.insert(80);

    // Display the binary search tree
    bst.display();

    // Search for values in the binary search tree
    cout << "Search 40: " << (bst.search(40) ? "Found" : "Not Found") << endl;
    cout << "Search 45: " << (bst.search(45) ? "Found" : "Not Found") << endl;

    // Delete a value from the binary search tree
    bst.remove(30);
    cout << "After deleting 30:" << endl;
    bst.display();

    return 0;
}
