#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent;
    int rank;
};

// Class to represent a graph
class Graph {
private:
    int V; // Number of vertices
    vector<Edge> edges; // List of edges

public:
    Graph(int V) : V(V) {}

    // Function to add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        Edge edge = {src, dest, weight};
        edges.push_back(edge);
    }

    // Utility function to find set of an element i (uses path compression technique)
    int find(vector<Subset>& subsets, int i) {
        if (subsets[i].parent != i) {
            subsets[i].parent = find(subsets, subsets[i].parent);
        }
        return subsets[i].parent;
    }

    // Utility function to perform union of two sets (uses union by rank)
    void Union(vector<Subset>& subsets, int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank) {
            subsets[xroot].parent = yroot;
        } else if (subsets[xroot].rank > subsets[yroot].rank) {
            subsets[yroot].parent = xroot;
        } else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }

    // Function to find the minimum spanning tree using Kruskal's algorithm
    void KruskalMST() {
        // Sort edges by weight
        sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b) {
            return a.weight < b.weight;
        });

        vector<Subset> subsets(V);
        for (int i = 0; i < V; i++) {
            subsets[i].parent = i;
            subsets[i].rank = 0;
        }

        vector<Edge> result;
        int e = 0;
        int i = 0;
        while (e < V - 1 && i < edges.size()) {
            Edge next_edge = edges[i++];
            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);
            if (x != y) {
                result.push_back(next_edge);
                Union(subsets, x, y);
                e++;
            }
        }

        cout << "Minimum Spanning Tree using Kruskal's Algorithm:" << endl;
        for (const auto& edge : result) {
            cout << edge.src << " - " << edge.dest << " (" << edge.weight << ")" << endl;
        }
    }
};

int main() {
    // Create a graph with 5 vertices
    Graph graph(5);

    // Add edges with weights
    graph.addEdge(0, 1, 3); // Engineering - Science
    graph.addEdge(0, 2, 2); // Engineering - Arts
    graph.addEdge(0, 3, 1); // Engineering - Medicine
    graph.addEdge(1, 2, 2); // Science - Arts
    graph.addEdge(1, 4, 1); // Science - Business
    graph.addEdge(2, 3, 1); // Arts - Medicine
    graph.addEdge(3, 4, 2); // Medicine - Business

    // Find minimum spanning tree using Kruskal's algorithm
    graph.KruskalMST();

    return 0;
}
