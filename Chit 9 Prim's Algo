#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

// Structure to represent a node in the graph
struct Node {
    int dest;
    int weight;
};

// Structure to represent a graph
class Graph {
private:
    int V; // Number of vertices
    vector<vector<Node>> adjList; // Adjacency list representation

public:
    Graph(int V) : V(V) {
        adjList.resize(V);
    }

    // Function to add an undirected edge to the graph
    void addEdge(int src, int dest, int weight) {
        adjList[src].push_back({dest, weight});
        adjList[dest].push_back({src, weight});
    }

    // Function to find the minimum spanning tree using Prim's algorithm
    void PrimMST() {
        // Priority queue to store vertices and their key values
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Vector to store parent of each vertex in MST
        vector<int> parent(V, -1);

        // Vector to store key value of each vertex
        vector<int> key(V, INT_MAX);

        // Vector to store whether a vertex is included in MST
        vector<bool> inMST(V, false);

        // Start with vertex 0
        pq.push({0, 0});
        key[0] = 0;

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            // Include vertex u in MST
            inMST[u] = true;

            // Update key value and parent of adjacent vertices
            for (const auto& neighbor : adjList[u]) {
                int v = neighbor.dest;
                int weight = neighbor.weight;
                if (!inMST[v] && weight < key[v]) {
                    key[v] = weight;
                    parent[v] = u;
                    pq.push({key[v], v});
                }
            }
        }

        // Print the edges of MST
        cout << "Minimum Spanning Tree using Prim's Algorithm:" << endl;
        for (int i = 1; i < V; ++i) {
            cout << parent[i] << " - " << i << " (" << key[i] << ")" << endl;
        }
    }
};

int main() {
    // Create a graph with 5 vertices
    Graph graph(5);

    // Add edges with weights
    graph.addEdge(0, 1, 3); // Engineering - Science
    graph.addEdge(0, 2, 2); // Engineering - Arts
    graph.addEdge(0, 3, 1); // Engineering - Medicine
    graph.addEdge(1, 2, 2); // Science - Arts
    graph.addEdge(1, 4, 1); // Science - Business
    graph.addEdge(2, 3, 1); // Arts - Medicine
    graph.addEdge(3, 4, 2); // Medicine - Business

    // Find minimum spanning tree using Prim's algorithm
    graph.PrimMST();

    return 0;
}
